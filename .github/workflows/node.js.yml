# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [created]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    - name: Run docker-compose for FalkorDB standalone instance
      uses: hoverkraft-tech/compose-action@v2.3.0
      with:
        compose-file: ./docker/standalone-compose.yml
    - name: Test if FalkorDB standalone instance is running
      run: |
        docker ps -a
        docker logs falkordb-standalone
        docker exec falkordb-standalone redis-cli ping || { echo "FalkorDB standalone instance is not running"; exit 1; }

    - name: Run docker-compose for FalkorDB replication instance
      uses: hoverkraft-tech/compose-action@v2.3.0
      with:
        compose-file: ./docker/sentinel-compose.yml

    - name: Test if FalkorDB replication instance is running
      run: |
        docker ps -a
        docker logs sentinel-1
        docker exec sentinel-1 redis-cli -p 26379 ping || { echo "FalkorDB replication instance is not running"; exit 1; }
        docker logs sentinel-2
        docker exec sentinel-2 redis-cli -p 26380 ping || { echo "FalkorDB replication instance is not running"; exit 1; }
        docker logs sentinel-3
        docker exec sentinel-3 redis-cli -p 26381 ping || { echo "FalkorDB replication instance is not running"; exit 1; }

    - name: Run docker-compose for FalkorDB cluster instance
      uses: hoverkraft-tech/compose-action@v2.3.0
      with:
        compose-file: ./docker/cluster-compose.yml
    
    - name: Test if FalkorDB cluster instance is running
      run: |
        docker ps -a
        for i in {0..5};do
          port=$((17000 + $i))
          docker logs node$i
          docker exec node$i redis-cli -p $port ping || { echo "FalkorDB cluster instance is not running"; exit 1; }
        done
    
    - name: Add entries to the host file to correctly resolve service names
      run: |
        sudo echo "127.0.0.1 falkordb-standalone" | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 sentinel-1"       | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 sentinel-2"       | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 sentinel-3"       | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 falkordb-server-1"   | sudo tee -a /etc/hosts
        sudo echo "127.0.0.1 falkordb-server-2"   | sudo tee -a /etc/hosts
        for i in node{0..5};do
          echo "127.0.0.1 $i" | sudo tee -a /etc/hosts
        done
    
    - name: install docker-compose client
      run: sudo apt update && sudo apt install docker-compose -y

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - run: npm ci
    - run: npm run lint
    - run: npm run build --if-present
    - name: Show running Docker containers
      run: docker ps -a

    - name: Wait for cluster to be fully ready
      run: |
        echo "Waiting for cluster formation to complete..."
        for i in {1..30}; do
          if docker exec node0 redis-cli -p 17000 cluster info | grep -q "cluster_state:ok"; then
            echo "Cluster state is OK after $i attempts"
            break
          fi
          echo "Attempt $i: Cluster not ready yet, waiting 2 seconds..."
          sleep 2
          if [ $i -eq 30 ]; then
            echo "Cluster failed to become ready after 60 seconds"
            docker logs cluster-creator
            exit 1
          fi
        done
        
        # Verify cluster is actually working
        docker exec node0 redis-cli -p 17000 --cluster check node0:17000 || { echo "Cluster check failed"; exit 1; }
        echo "Cluster is fully ready and operational!"

    - name: Run tests
      run: npx jest --coverage
      env:
        FALKORDB_HOST: localhost
        FALKORDB_PORT: 6379
    
    - name: Notify Google Chat
      id: test-action
      if: failure() # only send notification in case of failure
      uses: SimonScholz/google-chat-action@v1.1.0
      with:
          webhookUrl: '${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}'
          jobStatus: ${{ job.status }}
          threadKey: ${{ github.event.number }}

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  publish-npm:
    if: ${{ github.event.workflow_run.event == 'release' }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - run: npm ci
      - run: npm run build
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}

